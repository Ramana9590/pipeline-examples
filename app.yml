templateVersion: 2.0

meta:
  org: "mfp" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
  pod: "enigma-team" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
  name: "enigma"
  tier: 1 # can only be 1 or 2
  version: "1.0" # It would always be SemVer without patch which is generated by the build system.
  frameworks: # optional - these mentioned version should present in Jenkins tools to make it work. If not specified will take the default version.  
    - name: "jdk"
      version: "1.8.0_221"
    - name: "maven"
      version: "3.6.2"
    - name: "React"
      version: "1.15"

envVar:
  #   Absence of any of the secrets fails the deploy action
  secret: # This section contains only the references of mandatory secrets for validation purposes.
    - "Paytm_access_key" # should follow regex `^[a-zA-Z][a-zA-Z0-9-_]{3,16}[a-zA-Z0-9]`
  config: # Overrides only
    ref: "conf/" # Folder path to conf from the root
    overrides:
      - env: "rng_dev" # Environment Name, should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
        list:
          - configName: "connection_size"   # should follow regex `^[a-zA-Z][a-zA-Z0-9-_]{3,16}[a-zA-Z0-9]`
            value: 10
          - configName: "thread_pool"
            value: 10
      - env: "integration" # Environment Name, # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
        list:
          - configName: "connection_size"
            value: 100
          - configName: "thread_pool"
            value: 10

infra:
  compute: # This is for prod. For QA and dev,we'll manage.
    type: "VM" # could be VM or Container
    cpu: 2 # Max 16 cores and Min 1 cores
    memory: "200Mi" # Only Mi and Gi!  Example: 200Mi, 1Gi
    appPort: 8080
    appProtocol: "http"
    healthCheck: true
    healthProtocol: "http"
    healthURL: "/health"
    healthPort: 8080
    metricURL: "/metrics"
    metricPort: 8080
    startupTime: "80s"
    gracePeriod: "100s"
    requestTimeout: "80ms"
    logging:
      backend: "s3"# supports only sumologic and s3
    scaling: # We'll only support horizontal scaling right now
      min: 1
      max: 16
      metric:
        type: "cpu" # could be cpu, mem, latency or custom metric, you may multiple such metrics
        target: 70
    sidecars: # other than the main container
      - name: "sidecar1"
        image: "harbor.swiggy.rock/enigma_sidecar:0.0.1" # can be docker or debian package
        port: 8081
        cpu: 0.3
        memory: "200Mi"
        healthURL: "/health"
        metricURL: "/metrics"
  network:
    lbStrategy: "rr" # could be rr, hash or sticky.
    rateLimiting: "100rpm" # value in rpm
    security:
      authorizedServices:  #list of names
        - "*" # Allow all - wildcard
        - "offers"
        - "clm_admin"
        - "clm"
      expose: # this section is not needed if you do not want your service to be exposed to world
        - domain: "connect.swiggy.com"
          type: "http" # grpc, http, https is enforced
          endpoints: # mandatory fields
            - path: "/order"
              verb: "POST"
            - path: "/order"
              verb: "GET"
            - path: "/order/{orderId}/customer/{customerId}"
              verb: "GET"
          whitelist: # this section is needed only if you want to accept traffic only from certain IPs
            - "172.31.0.0/12"
            - "54.61.234.512/32"
  storage:
    - type: "disk"# Disk you get is network file system and common across your EC2 instances.
      params:
        storage: "100Gi"
    - type: "mysql"# it will expose standard port 3306 and url will be mysql.engima.staging.singapore.swig.gy
      name: "shuttle-db" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
      params:
        database: "your_db_name"
        schema: "bitbucket path to schema folder"
        grant: "SELECT,INSERT,UPDATE"
        disk: "20Gi"
        rps: 100
        wps: 20
        slaves: # For all the slaves, grant would automatically be only SELECT
          - name: "slave1"
            disk: "10Gi"
            rps: 10
          - name: "slave2"
            disk: "10Gi"
            rps: 10
    - type: "dynamodb"
      name: "entry-criteria"
      params:
        tableName: "entry_criteria"
        partitionKey: "resourceID" # this cannot be changed once table is created
        partitionKeyType: "string" # string or number or binary
        sortKey: "envname"  # optional
        sortKeyType: "string" # string or number or binary
        gsi:
          - indexName: "shuttle_index"
            partitionKey: "resourceID" # this cannot be changed once table is created
            partitionKeyType: "string" # string or number or binary
            sortKey: "username"  # optional
            sortKeyType: "string" # string or number or binary
            rcu: 10
            wcu: 10
            projection:
              projectionType: "INCLUDE"
              nonKeyattribute:
                - "field1"
                - "field2"
        lsi:
          - indexName: "shuttle_index_lsi"
            partitionKey: "resourceID" # this cannot be changed once table is created
            partitionKeyType: "string" # string or number or binary
            sortKey: "username"
            sortKeyType: "string"
            projection:
              projectionType: "ALL"
    - type: "redis"
      name: "shuttle"
      params:
        memory: "200Mi"   #should be in mb
        throughput: "100ops"
    - type: "kafka"
      name: "shuttle-kafka"
      params:
        producers:
          - name: "topic1"
            partitionCount: 10
            averageEventSize: "1kb" #Average event size in KB
            throughput: "100kbps"   #throughput should be in kb/s
          - name: "topic2"
            partitionCount: 20
            averageEventSize: "1kb" #Average event size in KB
            throughput: "100kbps"   #throughput should be in kb/s
        consumers:
          - name: "topic3"
          - name: "topic4"

pipeline:
  stages:
    - name: "unit-functional-test"
      env: "ci"
      actions:
        - type: "exec"
          name: "test-setup"
          params:
            command: "make VERBOSE=true create_db_test"
            ciContainer: "mysql" #optional(Required if you want to run few commands as part of setup in specific container)
        - type: "exec"
          name: "test-execution"
          params:
            command: "./gradlew clean integrationTest"
            ciContainer: "ubuntu" #optional
        - type: "codeCoverage"
          name: "code-coverage"
          params:
            exclusions: "**/*BranchName.java, **/*Actor.java"
            inclusions: ""
            coverageExclusions: ""
            testExclusions: ""
            testInclusions: ""
            cpdExclusions: ""
            coverageReportPaths: ""
        - type: "secCoverage"
          name: "sec-coverage" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
          params:
            exclusionPath: ""
        - type: "wait"
          name: "waiting" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
          params:
            duration: "10s"
        - type: "approval"
          name: "qa-sign-off" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
          params:
            role: "qa"
    - name: "" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
      env: ""
      actions:
        - type: "exec"
          name: "" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
          params:
            command: "make cmd/test"

        - type: "build"
          name: "" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
          params:
            pkg: "debian"
            clusterName: "enigma" # to be deprecated
            distPath: 'build/libs/enigma-1.0' # to solve multiple deployment use-case

        - type: "build"
          name: "" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
          params:
            pkg: "docker"
            file: "Dockerfile"

    - name: "rng_uat"
      env: "rng_integration"
      actions:
        - type: "exec"
          name: "" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
          params:
            command: "sh a.sh"
        - type: "deploy"
          name: "" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
          params:
            strategy: "rolling"  #rolling or canary.
        - type: "exec"
          name: "" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
          params:
            command: "sh a.sh"

    - name: "stage2"
      env: "rng_integration"
      type: "wait"
      actions:
        - type: "wait"
          name: "" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
          params:
            duration: "20s" # {20s, 1m, 3h} -- not allowed: 1d,1w,1y,20seconds,20S

    - name: "stage3"
      env: "rng_integration"
      type: "approval"
      actions:
        - type: "approval"
          name: "" # should follow regex `^[a-z][a-z0-9-]{3,16}[a-z0-9]`
          params:
            role: "qa"
            meta: # optional
              url: "" # optional
              comment: "" # optional
              sns: "" # optional

ciSetup:
  mysql:
    env:
      - name: "MYSQL_ROOT_PASSWORD"
        value: "notarealpassword"
    version: "5.7.26"
  redis:
    version: "5.0.5"

